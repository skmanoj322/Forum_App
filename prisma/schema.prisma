// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  forums    Forum[]  @relation("UserForums")
  comments  Comment[]
  likes     Like[]   @relation("UserLikes")
}

model Forum {
  id          String   @id @default(cuid())
  title       String
  description String
  tags        String[] // Use @db.Text[] if using PostgreSQL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation("UserForums", fields: [userId], references: [id])
  comments    Comment[] @relation("ForumComments")
  likes       Like[]   @relation("ForumLikes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  forumId   String
  user      User     @relation(fields: [userId], references: [id])
  forum     Forum    @relation("ForumComments",fields: [forumId], references: [id],onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  forumId   String
  createdAt DateTime @default(now())

  user      User     @relation("UserLikes", fields: [userId], references: [id])
  forum     Forum    @relation("ForumLikes", fields: [forumId], references: [id])

  @@unique([userId, forumId]) // Ensure a user can like a forum only once
}
